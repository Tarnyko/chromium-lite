--- quic/core/crypto/aead_base_decrypter.h	2019-04-26 00:57:18.031045262 +0200
+++ quic/core/crypto/aead_base_decrypter.h	2019-04-26 03:23:03.574071589 +0200
@@ -10,7 +10,11 @@
 #include "base/compiler_specific.h"
 #include "base/macros.h"
 #include "net/quic/core/crypto/quic_decrypter.h"
+#if defined(USE_OPENSSL)
 #include "net/quic/core/crypto/scoped_evp_aead_ctx.h"
+#else
+#include <pkcs11t.h>
+#endif
 #include "net/quic/platform/api/quic_export.h"
 
 namespace net {
@@ -18,10 +22,17 @@
 // AeadBaseDecrypter is the base class of AEAD QuicDecrypter subclasses.
 class QUIC_EXPORT_PRIVATE AeadBaseDecrypter : public QuicDecrypter {
  public:
+#if defined(USE_OPENSSL)
   AeadBaseDecrypter(const EVP_AEAD* aead_alg,
                     size_t key_size,
                     size_t auth_tag_size,
                     size_t nonce_prefix_size);
+#else
+  AeadBaseDecrypter(CK_MECHANISM_TYPE aead_mechanism,
+                    size_t key_size,
+                    size_t auth_tag_size,
+                    size_t nonce_prefix_size);
+#endif
   ~AeadBaseDecrypter() override;
 
   // QuicDecrypter implementation
@@ -47,8 +58,31 @@
   static const size_t kMaxKeySize = 32;
   static const size_t kMaxNoncePrefixSize = 4;
 
+#if !defined(USE_OPENSSL)
+  struct AeadParams {
+    unsigned int len;
+    union {
+      CK_GCM_PARAMS gcm_params;
+#if !defined(USE_NSS_CERTS)
+      // USE_NSS means we are using system NSS rather than our copy of NSS.
+      // The system NSS <pkcs11n.h> header doesn't define this type yet.
+      CK_NSS_AEAD_PARAMS nss_aead_params;
+#endif
+    } data;
+  };
+
+  virtual void FillAeadParams(base::StringPiece nonce,
+                              base::StringPiece associated_data,
+                              size_t auth_tag_size,
+                              AeadParams* aead_params) const = 0;
+#endif  // !defined(USE_OPENSSL)
+
  private:
+#if defined(USE_OPENSSL)
   const EVP_AEAD* const aead_alg_;
+#else
+  const CK_MECHANISM_TYPE aead_mechanism_;
+#endif
   const size_t key_size_;
   const size_t auth_tag_size_;
   const size_t nonce_prefix_size_;
@@ -59,7 +93,9 @@
   // The nonce prefix.
   unsigned char nonce_prefix_[kMaxNoncePrefixSize];
 
+#if defined(USE_OPENSSL)
   ScopedEVPAEADCtx ctx_;
+#endif
 
   DISALLOW_COPY_AND_ASSIGN(AeadBaseDecrypter);
 };
--- quic/core/crypto/aead_base_encrypter.h	2019-04-26 03:24:46.510071898 +0200
+++ quic/core/crypto/aead_base_encrypter.h	2019-04-26 03:29:30.134072752 +0200
@@ -10,7 +10,11 @@
 #include "base/compiler_specific.h"
 #include "base/macros.h"
 #include "net/quic/core/crypto/quic_encrypter.h"
+#if defined(USE_OPENSSL)
 #include "net/quic/core/crypto/scoped_evp_aead_ctx.h"
+#else
+#include <pkcs11t.h>
+#endif
 #include "net/quic/platform/api/quic_export.h"
 
 namespace net {
@@ -18,10 +22,17 @@
 // AeadBaseEncrypter is the base class of AEAD QuicEncrypter subclasses.
 class QUIC_EXPORT_PRIVATE AeadBaseEncrypter : public QuicEncrypter {
  public:
+#if defined(USE_OPENSSL)
   AeadBaseEncrypter(const EVP_AEAD* aead_alg,
                     size_t key_size,
                     size_t auth_tag_size,
                     size_t nonce_prefix_size);
+#else
+  AeadBaseEncrypter(CK_MECHANISM_TYPE aead_mechanism,
+                    size_t key_size,
+                    size_t auth_tag_size,
+                    size_t nonce_prefix_size);
+#endif
   ~AeadBaseEncrypter() override;
 
   // QuicEncrypter implementation
@@ -56,8 +67,31 @@
   static const size_t kMaxKeySize = 32;
   static const size_t kMaxNoncePrefixSize = 4;
 
+#if !defined(USE_OPENSSL)
+  struct AeadParams {
+    unsigned int len;
+    union {
+      CK_GCM_PARAMS gcm_params;
+#if !defined(USE_NSS_CERTS)
+      // USE_NSS means we are using system NSS rather than our copy of NSS.
+      // The system NSS <pkcs11n.h> header doesn't define this type yet.
+      CK_NSS_AEAD_PARAMS nss_aead_params;
+#endif
+    } data;
+  };
+
+  virtual void FillAeadParams(base::StringPiece nonce,
+                              base::StringPiece associated_data,
+                              size_t auth_tag_size,
+                              AeadParams* aead_params) const = 0;
+#endif
+
  private:
+#if defined(USE_OPENSSL)
   const EVP_AEAD* const aead_alg_;
+#else
+  const CK_MECHANISM_TYPE aead_mechanism_;
+#endif
   const size_t key_size_;
   const size_t auth_tag_size_;
   const size_t nonce_prefix_size_;
@@ -67,7 +101,9 @@
   // The nonce prefix.
   unsigned char nonce_prefix_[kMaxNoncePrefixSize];
 
+#if defined(USE_OPENSSL)
   ScopedEVPAEADCtx ctx_;
+#endif
 
   DISALLOW_COPY_AND_ASSIGN(AeadBaseEncrypter);
 };
--- quic/core/crypto/quic_decrypter.cc	2019-04-26 23:42:26.179104959 +0200
+++ quic/core/crypto/quic_decrypter.cc	2019-04-26 23:45:01.057105425 +0200
@@ -21,8 +21,6 @@
   switch (algorithm) {
     case kAESG:
       return new Aes128Gcm12Decrypter();
-    case kCC20:
-      return new ChaCha20Poly1305Decrypter();
     default:
       QUIC_LOG(FATAL) << "Unsupported algorithm: " << algorithm;
       return nullptr;
--- quic/core/crypto/quic_encrypter.cc	2019-04-26 23:41:42.670104828 +0200
+++ quic/core/crypto/quic_encrypter.cc	2019-04-26 23:46:38.338105718 +0200
@@ -17,8 +17,6 @@
   switch (algorithm) {
     case kAESG:
       return new Aes128Gcm12Encrypter();
-    case kCC20:
-      return new ChaCha20Poly1305Encrypter();
     default:
       QUIC_LOG(FATAL) << "Unsupported algorithm: " << algorithm;
       return nullptr;
