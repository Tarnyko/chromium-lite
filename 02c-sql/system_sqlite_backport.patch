--- recovery.cc	2019-04-24 18:02:27.076035130 +0200
+++ recovery.cc	2019-04-24 18:05:17.030035642 +0200
@@ -122,7 +122,11 @@
 // static
 bool Recovery::FullRecoverySupported() {
   // TODO(shess): See comment in Init().
+#if defined(USE_SYSTEM_SQLITE)
+  return false;
+#else
   return true;
+#endif
 }
 
 // static
@@ -222,7 +226,16 @@
     return false;
   }
 
-  // Enable the recover virtual table for this connection.
+  // TODO(shess): Figure out a story for USE_SYSTEM_SQLITE.  The
+  // virtual table implementation relies on SQLite internals for some
+  // types and functions, which could be copied inline to make it
+  // standalone.  Or an alternate implementation could try to read
+  // through errors entirely at the SQLite level.
+  //
+  // For now, defer to the caller.  The setup will succeed, but the
+  // later CREATE VIRTUAL TABLE call will fail, at which point the
+  // caller can fire Unrecoverable().
+#if !defined(USE_SYSTEM_SQLITE)
   int rc = recoverVtableInit(recover_db_.db_);
   if (rc != SQLITE_OK) {
     RecordRecoveryEvent(RECOVERY_FAILED_VIRTUAL_TABLE_INIT);
@@ -230,6 +243,10 @@
                << recover_db_.GetErrorMessage();
     return false;
   }
+#else
+  // If this is infrequent enough, just wire it to Raze().
+  RecordRecoveryEvent(RECOVERY_FAILED_VIRTUAL_TABLE_SYSTEM_SQLITE);
+#endif
 
   // Turn on |SQLITE_RecoveryMode| for the handle, which allows
   // reading certain broken databases.
