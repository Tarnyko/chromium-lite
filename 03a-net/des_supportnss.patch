--- http/des.cc	2019-04-25 19:04:11.519100130 +0200
+++ http/des.cc	2019-04-25 19:13:08.876101747 +0200
@@ -5,8 +5,14 @@
 #include "net/http/des.h"
 
 #include "base/logging.h"
+#if defined(USE_OPENSSL)
 #include "crypto/openssl_util.h"
 #include "third_party/boringssl/src/include/openssl/des.h"
+#elif defined(USE_NSS_CERTS)
+#include <nss.h>
+#include <pk11pub.h>
+#include "crypto/nss_util.h"
+#endif
 
 // The iOS version of DESEncrypt is our own code.
 // DESSetKeyParity and DESMakeKey are based on
@@ -73,15 +79,77 @@
   key[7] = DESSetKeyParity((raw[6] << 1));
 }
 
+#if defined(USE_OPENSSL)
+
 void DESEncrypt(const uint8_t* key, const uint8_t* src, uint8_t* hash) {
   crypto::EnsureOpenSSLInit();
 
   DES_key_schedule ks;
-  DES_set_key(
-      reinterpret_cast<const DES_cblock*>(key), &ks);
+  DES_set_key_unchecked(
+      reinterpret_cast<const_DES_cblock*>(const_cast<uint8*>(key)), &ks);
 
-  DES_ecb_encrypt(reinterpret_cast<const DES_cblock*>(src),
+  DES_ecb_encrypt(reinterpret_cast<const_DES_cblock*>(const_cast<uint8*>(src)),
                   reinterpret_cast<DES_cblock*>(hash), &ks, DES_ENCRYPT);
+
+}
+
+#elif defined(USE_NSS_CERTS)
+
+void DESEncrypt(const uint8* key, const uint8* src, uint8* hash) {
+  CK_MECHANISM_TYPE cipher_mech = CKM_DES_ECB;
+  PK11SlotInfo* slot = NULL;
+  PK11SymKey* symkey = NULL;
+  PK11Context* ctxt = NULL;
+  SECItem key_item;
+  SECItem* param = NULL;
+  SECStatus rv;
+  unsigned int n;
+
+  crypto::EnsureNSSInit();
+
+  slot = PK11_GetBestSlot(cipher_mech, NULL);
+  if (!slot)
+    goto done;
+
+  key_item.data = const_cast<uint8*>(key);
+  key_item.len = 8;
+  symkey = PK11_ImportSymKey(slot, cipher_mech,
+                             PK11_OriginUnwrap, CKA_ENCRYPT,
+                             &key_item, NULL);
+  if (!symkey)
+    goto done;
+
+  // No initialization vector required.
+  param = PK11_ParamFromIV(cipher_mech, NULL);
+  if (!param)
+    goto done;
+
+  ctxt = PK11_CreateContextBySymKey(cipher_mech, CKA_ENCRYPT,
+                                    symkey, param);
+  if (!ctxt)
+    goto done;
+
+  rv = PK11_CipherOp(ctxt, hash, reinterpret_cast<int*>(&n), 8,
+                     const_cast<uint8*>(src), 8);
+  if (rv != SECSuccess)
+    goto done;
+
+  // TODO(wtc): Should this be PK11_Finalize?
+  rv = PK11_DigestFinal(ctxt, hash+8, &n, 0);
+  if (rv != SECSuccess)
+    goto done;
+
+ done:
+  if (ctxt)
+    PK11_DestroyContext(ctxt, PR_TRUE);
+  if (symkey)
+    PK11_FreeSymKey(symkey);
+  if (param)
+    SECITEM_FreeItem(param, PR_TRUE);
+  if (slot)
+    PK11_FreeSlot(slot);
 }
 
+#endif
+
 }  // namespace net
